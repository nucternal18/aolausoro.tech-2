// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  company     String
  createdBy   String   @db.ObjectId
  jobLocation String
  jobType     String
  position    String
  status      String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("jobs")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String  
  message   String
  name      String
  subject   String
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String
  createdAt   DateTime @default(now())
  github      String
  projectName String
  description String
  published   Boolean
  techStack   String[]
  updatedAt   DateTime @updatedAt
  url         String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("projects")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String   @unique
  image     String
  isAdmin   Boolean
  name      String
  projects  Project[]
  jobs      Job[]
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]
  issues        Issue[]
  clerkId  String? @unique
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issue {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  description String
  status      Status @default(OPEN)
  title       String
  updatedAt   DateTime @updatedAt
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@map("issues")
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}