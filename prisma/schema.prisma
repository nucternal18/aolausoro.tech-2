generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Jobs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  company     String
  createdBy   String   @db.ObjectId
  jobLocation String
  jobType     String
  position    String
  status      String
  userId String @db.ObjectId
  user   Users   @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Messages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String   @unique
  message   String
  name      String
  subject   String
  updatedAt DateTime @updatedAt
}

model Projects {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String
  createdAt   DateTime @default(now())
  github      String
  projectName String
  techStack   String[]
  updatedAt   DateTime @updatedAt
  url         String
  userId String @db.ObjectId
  user   Users   @relation(fields: [userId], references: [id])
}

model Users {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  email     String   @unique
  image     String
  isAdmin   Boolean
  name      String
  projects  Projects[]
  jobs      Jobs[]
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]
  password  String
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
 refresh_token      String?  @db.String
access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
